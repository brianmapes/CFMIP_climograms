;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; MODEL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; INDEPENDENT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Append to an index file of ASCII values of site, month, rain, CF,
;;; OM500, and also the total and composite diurnal variances of these

;;; First make diurnal composites 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Diurnal cycle

DT = mean( deriv(tplot) )
;NTPERDAY = fix(1./DT + 0.01) ;;; debugging surprise, this needs an epsilon fix
NTPERDAY = fix(1.0/DT + 0.01)
if(SMOO eq 73) then NTPERDAY = 72 ;;; Weird shit! This is needed to COMPILE process_CAM.pro...

NDAYS = n_elements(tplot)/NTPERDAY
EXACTMONTH = NDAYS * NTPERDAY

Rmatrix = reform( rain[indgen(EXACTMONTH)], NTPERDAY, NDAYS )
Rdiurn = total( Rmatrix, 2 )/NDAYS

w500 = reform(omeg(LEV500,*))
w500matrix = reform(w500[indgen(EXACTMONTH)], NTPERDAY, NDAYS )
w500diurn = total( w500matrix, 2 )/NDAYS

netCF = SWCF + LWCF
netCFmatrix = reform(netCF[indgen(EXACTMONTH)], NTPERDAY, NDAYS )
netCFdiurn = total( netCFmatrix, 2 )/NDAYS

LWTOAmatrix = reform(LWTOA[indgen(EXACTMONTH)], NTPERDAY, NDAYS )
LWTOAdiurn = total( LWTOAmatrix, 2 )/NDAYS

SWTOAmatrix = reform(SWTOA[indgen(EXACTMONTH)], NTPERDAY, NDAYS )
SWTOAdiurn = total( SWTOAmatrix, 2 )/NDAYS

clockhour = 24*(tplot(0) mod 1) + findgen(NTPERDAY) * DT * 24. ;;; units: hours
print, NTPERDAY, NDAYS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Write stat
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; index file
if (n_elements(monames) gt 0) then mostr = monames(imo)

openw, 23, '../LAGARRAYS/indexfile.txt', /append
printf, 23, format='( A9, A7, A5, 11F10.2 )', MODEL_NAME, station_string, mostr, $
  momeanrain*24, mean(w500), momeanCF, $
  stdev(rain*24), stdev(w500), stdev(SWCF+LWCF), $
  stdev(Rdiurn*24), stdev(w500diurn), stdev(netCFdiurn), $
  stdev(LWTOA), stdev(LWTOAdiurn)
close,23

;;; Page layout
!p.multi=[0,1,5]

;;;;;;;;;;;;;;;;Plot TOA radiation numbers
;SWCF = SWTOA-SWTOAC ;;; a negative number, reflected solar
;LWCF = LWTOAC-LWTOA ;;; a positive number, reduced OLR
;  momean = mean(SWCF+LWCF)

plot,  tplot, smooth(smooth(SWCF,SMOO),SMOO), yra=[-200,200],thick=3, lines=2, $
  xtit='day', ytit='SW:cooling    netCRF(Wm!U-2!N)    LW:warming', $
  title='CRF (24h smooth, red=mean), '+model_name+VERSION+ $
  ' '+site+' '+MOstr+', om500 (hPa/d) = '+str(mean(omeg(LEV500,*)))

oplot, tplot,               SWCF       , thick=0.5, lines=2
oplot, tplot,               LWCF       , lines=1, thick=0.5
oplot, tplot, smooth(smooth(LWCF,SMOO),SMOO)  , lines=1, thick=3
oplot, tplot, smooth(smooth(SWCF+LWCF,SMOO),SMOO) , thick=5, lines=0
oplot, [0,1e5],[0,0]
  oplot, [0,1e5],[0,0]+momeanCF, color=250, thick=5

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Time-height of RH and cloud fractions, plus rain
loadct,1,file='~bem/colors1.tbl' ;;; Gray scale

contour, rotate( RHplot ,4), tplot, pplot, /fill, color=255, $
  Level=RHlevels, yra=[1099,50], ytit='p (hPa)', xtit='day', $
  title="RH (10%), condensate ("+CWClev_label+"), hot T', rain"

				       ;levels = RHlevels
				       ;MAKE_KEY, COLORS=findgen(n_elements(levels)) * !D.N_colors /n_elements(levels), $
					  ;          labels = round_any([min(levels),(min(levels)+max(levels))/2.],sig=3), $
					 ;          labels = str(fix([min(levels),(min(levels)+max(levels))/2.])), $
		 ;  units = '%',/orientation, BCOLOR=255

;;;;;;;;;;;;;;;;;Cloud fraction etc back to colors
loadct, 39

oplot, tplot, 1099-rain*100, lines=0, thick=3,color=144
oplot, tplot, 1099-rainLS*100, lines=1, thick=2,color=144
if (n_elements(rainLS2) gt 0) then $
  oplot, tplot, 1099-rainLS2*100, lines=1, thick=2,color=250

axis, yaxis=1, yticks=2, ytickv = [1099,1000,900], ytickname=['0','1','2'], $
  ytit='mm/h                                  '

;;; Condensed water content
contour, rotate(CWC,4), tplot, pplot, /over, $
  level = CWClevels, yra=[1000,50], color=100, c_thick = CWClevels*25 >1

;;;;;; OVERPLOT TEMPERATURE ERRORS IN 10K INCREMENTS FOR SCAM DETECTION
if (n_elements(Tpert) gt 0) then $
  contour, rotate( Tpert ,4), tplot, pplot, /over,  Level=[3,4,5,10,15,20,25,30], $
  color=230,thick=5, c_lines = intarr(20)+1
if (n_elements(Tpert) gt 0) then $
   contour, rotate( Tpert ,4), tplot, pplot, /over,  Level=-[30,25,20,15,10], color=50,thick=4, $
  c_lines = intarr(20)+1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Time-height Q1
Q1levels = (-10+findgen(21)) ;;; K/day

;;;; Want a blue-red color table for this
hue = [240+bytarr(128)        , 360+bytarr(127)]
sat = [1-findgen(127)/150.    , (150-127+findgen(127))/150.,0] ;; black at 0, white at 255 
val = [0,1-0.3*findgen(126)/125., 1+fltarr(127),1] ;; black at 0, white at 255
tvlct, hue,sat,val,/HSV

contour, rotate(Q1plot,4) < 0.9*max(Q1levels) > 0.9*min(Q1levels), tplot, pplot, /fill, $
  level=Q1levels, yra=[1000,50], ytit='p (hPa)', xtit='day', $
title = 'Q1 (color), cloud fractions '+Cfrac_label
CFlevels = ( 5+10*indgen(11) )/100. ;;; data are fraction not %

;loadct,2,file='~bem/colors1.tbl' ;;; Blue-red ;;loadct, 33
;contour, rotate(Q1plot,4), tplot, pplot, /fill, $
;  level=Q1levels, yra=[1000,50],/over

;;; color key
levels = Q1levels
MAKE_KEY, COLORS=findgen(n_elements(levels)) * !D.N_colors /n_elements(levels), $
          labels = str(fix([min(levels),(min(levels)+max(levels))/2.])), $
;          labels = round_any([min(levels),(min(levels)+max(levels))/2.],sig=3), $
          units = 'K/d',/orientation


;;;; Cloud fraction
contour, rotate(cloudfraction-ccloudfraction,4), tplot, pplot, /over, $
    level = CFlevels, yra=[1099,50], color=0, fill=0, c_thick=CFlevels*5 >1

contour, rotate(ccloudfraction,4), tplot, pplot, /over, $
  level = CFlevels, yra=[1099,50], color=0, c_lines = 1+0*CFlevels, c_thick=CFlevels*5>1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Time-height divergence 
DIVlevels = OMlevels/10.

contour, rotate(DIV,4) < max(DIVlevels)*0.9 > min(DIVlevels)*0.9, tplot, pplot, /fill, $
  level=DIVlevels, yra=[1000,50], ytit='p (hPa)', xtit='day', $
  title='Div (color), 10!U-6!N s!U-1!N and grid levels',/nodata

contour, rotate(DIV,4), tplot, pplot, /fill, $
  level=DIVlevels, yra=[1000,50],/over

;;; color key
levels = DIVlevels
MAKE_KEY, COLORS=findgen(n_elements(levels)) * !D.N_colors /n_elements(levels), $
          labels = str(fix([min(levels),(min(levels)+max(levels))/2.])), $
;          labels = round_any([min(levels),(min(levels)+max(levels))/2.],sig=3), $
          units = 'div',/orientation

  loadct, 39 ;; back to black

;;; grid overlay
for ip=0,n_elements(pplot)-1 do $
  oplot, [min(tplot),max(tplot)],[pplot(ip),pplot(ip)],lines=1

;;;;;; Bottom row: diurnal cycle, spectra, PCOMPs
!p.multi=[3,3,5]

plot, clockhour, 24*Rdiurn, xtitle = 'hour UTC', title="Diurnal R, w500', OLR', SWUP'", $
  yra = [-1,1]*20
hor,0
oplot, clockhour, w500diurn-mean(w500diurn), lines = 2, color=130
oplot, clockhour, LWTOAdiurn-mean(LWTOAdiurn), lines = 3, color=50
oplot, clockhour, SWTOAdiurn, color=250

;;;;;; Spectra - rain, w500, OLR

cpdscale = findgen(N_elements(tplot)) /NDAYS

plot, cpdscale(1:*), (abs(fft( 24*rain[indgen(EXACTMONTH)] ))^2) (1:*), xra = [0,3], yra=[0.001,10000], /ylog, $
  title="Spectra of R, w500', OLR', SW'", xtit='cpd'
oplot, cpdscale(1:*), (abs(fft( w500[indgen(EXACTMONTH)] ))^2) (1:*), lines = 2, color=130
oplot, cpdscale(1:*), (abs(fft( LWTOA[indgen(EXACTMONTH)] ))^2) (1:*), lines = 3, color=50
oplot, cpdscale(1:*), (abs(fft( SWTOA[indgen(EXACTMONTH)] ))^2) (1:*), lines=1, color=250

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;;;;; Try principal component analysis
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

coefficients = 1 & variances = 1
data = RHplot ;;; REGRID TO EQUAL PRESSURE LEVELS
sz = SIZE(data)

pcs = PCOMP(data, /DOUBLE, $   ; /covariance, $
            COEFFICIENTS = coefficients, VARIANCES = variances, $
            NVARIABLES = 4)

eof =0
struct = coefficients(*,eof)
ts = pcs(eof,*)

plot, coefficients(*,eof), pplot, yra=[1000,100], tit='3 EOFs of RH', xra=[-1,1]
FOR eof = 1,2 DO $
  oplot, coefficients(*,eof), pplot, lines=eof
ver,0
;;;; Time series
;plot, pcs(eof,*), tit='PCs of RH'
;FOR pc = 1,2 DO $
;  oplot, pcs(eof,*), lines=eof

;stop

timestamp

















goto, jump999

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Bottom row of page: cloud statistics
!p.multi=[4,4,5]
loadct,1,file='~bem/colors1.tbl' ;;; Gray scale

;;;;;;; CFAD of cloud mass
massCFAD = fltarr(41, NLEVS)
for ilev=0, NLEVS-1 do $
  massCFAD(*,ilev) = histogram(CWC(ilev,*), MIN=0, NBINS=41, BINSIZE=MAXCWC/40.) 

hhh = alog(massCFAD(1:*,*) > 1)
levels = (max(hhh)+1e-9) * findgen(11)/10.
contour, hhh, (1+findgen(40))/40*MAXCWC, pplot, $
  yra=[1000,50], /fill, level=levels, ytit='p (hPa)', xtit='Condsdate (g/kg)', $
  tit='CWC histogram', color=255

;;; grid overlay
for ip=0,n_elements(pplot)-1 do $
  oplot, [0,1],[pplot(ip),pplot(ip)],lines=1,color=255

;;;;;;; CFAD of cloud FRACTIONs
cfCFAD = fltarr(21, NLEVS)
for ilev=0, NLEVS-1 do $
  cfCFAD(*,ilev) = histogram(cloudfraction(ilev,*), MIN=0, NBINS=21, BINSIZE=0.05) 
ccfCFAD = fltarr(21, NLEVS)
for ilev=0, NLEVS-1 do $
  ccfCFAD(*,ilev) = histogram(ccloudfraction(ilev,*), MIN=0, NBINS=21, BINSIZE=0.05) 

hhh = alog(cfCFAD(1:*,*) > 1)
levels = (max(hhh)+1e-9) * findgen(11)/10.
contour, hhh+1e-3, (1+findgen(20))/20, pplot, $
  yra=[1000,50], /fill, levels=levels, ytit='p (hPa)', xtit='cloud fraction', $
  tit='CLDFRAC (red=conv)', color=255

;;; grid overlay
for ip=0,n_elements(pplot)-1 do $
  oplot, [0,1],[pplot(ip),pplot(ip)],lines=1,color=255

  loadct, 33
contour, alog(ccfCFAD(1:*,*) > 1)+1e-3, (1+findgen(20))/20, pplot, $
  yra=[1000,50], levels=levels, color=250,/over

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;; Temporal autocorrelations: smoo 1s 1 day, go for 5 days
LAG = (indgen(smoo)) *5  ;;; index, 300 units = 100 hours
LAGCORS = fltarr(N_elements(lag), NLEVS)
if (max(cwc) gt 0) then $
  for ilev=0, NLEVS-1 do $
  LAGCORS(*,ilev) = a_correlate([-1e-8,reform(CWC(ilev,*))],lag)
;;;;;;;;;;;;;;;;;;;;;;;;;;;Plot of correlation
;CORLEV = -1 + findgen(21)/10.
;loadct, 39
;contour, lagcors, lag*mean(deriv(time)), pplot, yra=[1000,50], /fill, level=CORLEV,$
;  ytit='p (hPa), and offset-100*autocorrelation', xtit='lag (days)', $
;  tit='CWC auto-corr. times',/nodata
;;;;;;;; Level by level line samples
;plevs = [11,15,18,20,22,24]
;for ip = 0, n_elements(plevs)-1 do $
;  oplot, lag*mean(deriv(time)), -lagcors(*,plevs[ip])*100 + pplot(plevs[ip])
;for ip = 0, n_elements(plevs)-1 do $
;  oplot, lag*mean(deriv(time)), -lagcors(*,plevs[ip])*0 + pplot(plevs[ip])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; COnditional probability composites
PROBWINDOW = 5*SMOO
CONPROB_CLD = fltarr(PROBWINDOW, NLEVS)
;CONPROB_CLR = fltarr(PROBWINDOW, NLEVS)
PROBTIME = indgen(PROBWINDOW)*mean(deriv(tplot))

if(max(cwc) gt 0) then begin

for ilev=0, NLEVS-1 do begin
    binary_cld = CWC(ilev,*) ge min(CWClevels) 
    wzeros = where( CWC(ilev,*) lt min(CWClevels) )
     wones = where( CWC(ilev,*) ge min(CWClevels) )>0

;    for i=0,n_elements(wzeros)-1 do $
;       CONPROB_CLR(*,ilev) = CONPROB_CLR(*,ilev) + (shift(binary_cld, -wzeros(i))) (0:PROBWINDOW-1)
     for i=0,n_elements(wones)-1 do $
       CONPROB_CLD(*,ilev) = CONPROB_CLD(*,ilev) + (shift(binary_cld, -wones(i))) (0:PROBWINDOW-1)

 endfor
endif

;;;; Normalize so it's probability

for ilev=0, NLEVS-1 do CONPROB_CLD(*,ilev) = CONPROB_CLD(*,ilev) /(max(CONPROB_CLD(*,ilev)) >1)

;;;;;;;;;;;;;;;;;;;;;;;;;;; Plot of probability decay
loadct,1,file='~bem/colors1.tbl' ;;; Gray scale

PROBLEV = findgen(15)/10.
contour, CONPROB_CLD, PROBTIME, pplot, yra=[1000,50], /fill, level=PROBLEV,$
  ytit='p (hPa), and 100*probability+offset', xtit='lag (days)', $
  tit='p(CWC>min) vs. lag',color=255 ;;,/nodata

loadct, 39
;;;;;;;; Level by level line samples
;for ip = 0, n_elements(plevs)-1 do oplot, [0,max(PROBTIME)], [pplot(plevs[ip]),pplot(plevs[ip])]
;for ip = 0, n_elements(plevs)-1 do $
;  oplot, PROBTIME, -CONPROB_CLD(*,plevs[ip])*100 + pplot(plevs[ip])
;for ip = 0, n_elements(plevs)-1 do $
;  oplot, PROBTIME, -(CONPROB_CLR(*,plevs[ip])*100) + pplot(plevs[ip]), lines=1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Pressure autocorrelation plots
PCORS = fltarr(NLEVS, NLEVS)

for ilev=0, NLEVS-1 do $
for ilev2=0, NLEVS-1 do $
  PCORS(ilev,ilev2) = correlate(CWC(ilev,*), CWC(ilev2,*))

plot, PCORS(plevs[0],*), pplot, yra=[1000,50], xra=[-0.2,1], $
    ytit='p (hPa)', xtit='correlation', tit='CWC vert. scale'
oplot, [0,0],[1050,0]
for ip = 0, n_elements(plevs)-1 do $
  oplot, PCORS(plevs[ip],*), pplot, lines=ip

jump999: 
;;; Skipped cloud statistics
